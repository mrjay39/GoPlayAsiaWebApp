@using GoPlayAsiaWebApp.Goplay.ViewModels
@using static GoplayasiaBlazor.Models.Constants.Settings
@inject BigWinViewModel iBigWinViewModel
<div class="mainContainer pb-1">
    <div class="row1 d-flex justify-content-between ">
        <button class="btn buttonLetter" @onclick="(() => setBet('A'))">A</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('B'))">B</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('C'))">C</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('D'))">D</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('E'))">E</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('F'))">F</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('G'))">G</button>
    </div>
    <div class="row2 d-flex justify-content-between mt-2">
        <button class="btn buttonLetter" @onclick="(() => setBet('H'))">H</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('I'))">I</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('J'))">J</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('K'))">K</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('L'))">L</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('M'))">M</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('N'))">N</button>
    </div>
    <div class="row3 d-flex justify-content-between mt-2">
        <button class="btn buttonLetter" @onclick="(() => setBet('O'))">O</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('P'))">P</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('Q'))">Q</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('R'))">R</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('S'))">S</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('T'))">T</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('U'))">U</button>
    </div>
    <div class="row4 d-flex justify-content-between mt-2">
        <button class="btn resetBtn" @onclick="(() =>  clear())"></button>
        <button class="btn buttonLetter" @onclick="(() => setBet('V'))">V</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('W'))">W</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('X'))">X</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('Y'))">Y</button>
        <button class="btn buttonLetter" @onclick="(() => setBet('Z'))">Z</button>
        <button class="btn clearBtn" @onclick="(() => delKey())"><span>x</span></button>
    </div>
</div>

<div id="btn-container" class="betButtonContainer d-flex justify-content-center align-items-center pl-1 pr-1">
    <div class="btn luckyBall GTotalBetContainer d-flex col p-0 align-items-center justify-content-center bg-brown text-white rounded-lg" @onclick="setLuckyPickBet">
        <p class="p-0 text-center mb-0 lucky-pick">
            <span>QUICK &nbsp;</span>
            <span>PICK &nbsp;</span>
        </p>
    </div>
    <div class="d-flex col p-0 align-items-center">
        <button class="btn @(iBigWinViewModel.IsBetEnabled ? "betButtonActive" : "betButton")" @onclick='(() => betOptionSelected(Constants.NormalPick))' disabled="@(!iBigWinViewModel.IsBetEnabled)">BET &nbsp;</button>
    </div>
    <div class="GTotalBetContainer d-flex col p-0 align-items-center justify-content-center bg-brown text-white rounded-lg">
        <p class="p-0 text-center mb-0">
            <span><i class="fa-solid fa-coins text-warning"></i></span>
            <span>@TotalBets</span>
        </p>
    </div>


</div>


@code {
    #region Parameters
    [Parameter] public EventCallback<MouseEventArgs> OnClickCallback { get; set; }
    [Parameter] public int TotalBets { get; set; }
    #endregion
    #region  Local functions

    private async Task setBet(char e)
    {
        if (iBigWinViewModel.LetterValue.Length < 5 || iBigWinViewModel.IsLuckyPick1)
        {
            await iBigWinViewModel.AddCharacter(e.ToString());
            return;

        }

    }
    private void delKey()
    {
        if (iBigWinViewModel.LetterValue.Length > 0)
        {
            if (iBigWinViewModel.IsLuckyPick1)
            {
                iBigWinViewModel.IsLuckyPick1 = false;
            }
            iBigWinViewModel.LetterValue = iBigWinViewModel.LetterValue.Remove(iBigWinViewModel.LetterValue.Length - 1, 1);
            if (iBigWinViewModel.LetterValue.Length == 5)
            {
                iBigWinViewModel.IsBetEnabled = true;
            }
            else
            {
                iBigWinViewModel.IsBetEnabled = false;
            }
        }
    }
    private void clear()
    {
        iBigWinViewModel.LetterValue = string.Empty;
        iBigWinViewModel.BetAmount = int.Parse(iBigWinViewModel.BaseBetValue);
        iBigWinViewModel.TotalBetAmount = iBigWinViewModel.BetAmount;
    }
    private async Task luckyPick()
    {

        iBigWinViewModel.IsBetEnabled = false;
        bool valid = await iBigWinViewModel.BetOptionSelected(Constants.LuckyPick);
        if (valid)
        {

            await iBigWinViewModel.SubmitBet();
        }
    }
    private async Task betOptionSelected(object type)
    {
        if (!iBigWinViewModel.IsBetEnabled) return;

        if (iBigWinViewModel.IsBetEnabled && (iBigWinViewModel.IsLuckyPick1 || iBigWinViewModel.IsLuckyPick10 || iBigWinViewModel.IsLuckyPick5 || iBigWinViewModel.IsLuckyPick3))
        {
            if (iBigWinViewModel.IsLuckyPick1)
                type = Constants.LuckyPick;
            else if (iBigWinViewModel.IsLuckyPick5)
                type = Constants.LuckyPickx5;
            else if (iBigWinViewModel.IsLuckyPick10)
                type = Constants.LuckyPickx10;
            else if (iBigWinViewModel.IsLuckyPick3)
                type = Constants.LuckyPickx3;
        }
        iBigWinViewModel.IsBetEnabled = false;
        bool valid = await iBigWinViewModel.BetOptionSelected(type);
        if (valid)
        {

            await iBigWinViewModel.SubmitBet();
            clear();
            iBigWinViewModel.CurrView = "Current";
        }
    }
    private async Task setLuckyPickBet()
    {
        await iBigWinViewModel.GenerateLuckyPick1();
    }
    #endregion
}