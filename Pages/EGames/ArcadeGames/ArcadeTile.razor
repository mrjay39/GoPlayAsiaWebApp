@using System.Security.Claims
@using GoPlayAsiaWebApp.Controls.GameIframe
@using GoPlayAsiaWebApp.Pages.Login.LogInModal
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager _navigationManager
@inject IModalService ModalService

<div class="card m-1 p-0 border-dark game-tile">
    <div class="container-fluid p-0 bg-img">
        <img src="@_imgStr" class="card-img-top featGames-bg basketBall" @onclick="ToggleActive">
    </div>
    <div class="info @(isActive ? "active" : "")">
        <div class="content">
            <div class="subtitle"><h3 class="text-white fw-bold">@_titleStr</h3></div>
            <div class="button button-playNow">
                <button class="btn btn-warning m-1"  @onclick="OpenGameLink">
                    <span>Play Now</span>
                    <div class="arrow">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </button>
            </div>
            <div class="button button-gameInfo">
                <a class="btn btn-dark m-1" href="@_gameInfoHrefStr">Game Info</a>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter] public string _idStr { get; set; } = string.Empty;
    [Parameter] public string? _imgStr { get; set; }
    [Parameter] public string? _titleStr { get; set; }
    [Parameter] public string? _gameInfoHrefStr { get; set; }
    [Parameter] public string? _tryoutsHrefStr { get; set; }

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [CascadingParameter] public IModalService popuLoadingpModal { get; set; }
    private ClaimsPrincipal user;

    private bool isActive = false;
    private void ToggleActive()
    {
        isActive = !isActive;
        if (isActive)
        {
            // Start a timer to remove the active class after 20 seconds
            TimerCallback timerCallback = state =>
            {
                isActive = false;
                StateHasChanged(); // Notify Blazor that the state has changed
            };
            var timer = new Timer(timerCallback, null, 4000, Timeout.Infinite);
        }
    }

    private async void OpenGameLink()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        if (!user.Identity.IsAuthenticated)
        {
            var refPopup = popuLoadingpModal.Show<LoginAndSignUp>("");
        }
        else
        {
            _navigationManager.NavigateTo(_tryoutsHrefStr);


            // Show the GameIframePopUp component with the TryoutsHref parameter
            //var parameters = new ModalParameters();
            //parameters.Add(nameof(GameIframePopUp.TryoutsHref), _tryoutsHrefStr);
            //var gameIframePopup = popuLoadingpModal.Show<GameIframePopUp>("", parameters);

        }

    }
}