@using GoPlayAsiaWebApp.Games.Shared
@using GoplayasiaBlazor.Models.Constants;
@using GoPlayAsiaWebApp.ViewModels;
@inject DiceViewModel _diceViewModel;

<div id="diceColor" class="flex">
    <div id="diceButton-container" class="d-flex text-center container p-0">
        <div class="col p-0">
            <div class="flex">

                @* Single Dice Bet Properties *@
                <div class="flex diceHeaderContainer pb-1 pt-1 m-1">
                    <p class="mb-0 up-font"><span class="mr-30">SINGLE DICE BET</span><span class="col p-0 pl-4">&nbsp; @Single_Dice_Multiplier</span></p>
                </div>
                <div id="singleBetDiceColor" class="container p-0">
                    <div class="d-flex mr-1">
                        @* First DICE *@
                        <button type="button" class="diceColorButton diceContainer" @onclick="(() => SelectBetType((int)Settings.DiceBetTypes.FirstDice))">
                            <span class="diceColorButton yellow p-1 col">@(_diceViewModel.CurrentGameType == (int)Settings.DiceBetTypes.FirstDice && Bet_Value != String.Empty && Bet_Value is not null ? Bet_Value.Last() : "")</span>
                        </button>

                       @* SECOND DICE *@
                        <button type="button" class="diceColorButton diceContainer" @onclick="(() => SelectBetType((int)Settings.DiceBetTypes.SecondDice))">
                            <span class="diceColorButton blue p-1 col">@(_diceViewModel.CurrentGameType == (int)Settings.DiceBetTypes.SecondDice && Bet_Value != String.Empty && Bet_Value is not null ? Bet_Value.Last() : "")</span>
                        </button>

                        @* THIRD DICE *@
                        <button type="button" class="diceColorButton diceContainer" @onclick="(() => SelectBetType((int)Settings.DiceBetTypes.ThirdDice))">
                            <span class="diceColorButton red p-1 col">@(_diceViewModel.CurrentGameType == (int)Settings.DiceBetTypes.ThirdDice && Bet_Value != String.Empty && Bet_Value is not null ? Bet_Value.Last() : "")</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col p-0">
            <div class="d-flex">

                @* Triple Dice Bet Properties *@
                <div id="tripleDiceColor" class="container p-0">
                    <div class="flex diceHeaderContainer pb-1 pt-1 m-1">
                        <p class="mb-0 up-font flex p-0"><span class="col p-0">TRIPLE DICE BET</span><span class="col p-0 pl-4">&nbsp; @All_Dice_Multiplier</span></p>
                    </div>
                    <div class="container p-0">
                        <div class="d-flex">
                            <button type="button" class="diceColorButton diceContainer flex" @onclick="(() => SelectBetType((int)Settings.DiceBetTypes.TripleDice))">
                                <span class="btn p-1 mt-1 yellow col diceColorButton dice-width">
                                    @if (Bet_Value != String.Empty && Bet_Value is not null && Bet_Value.Length > 0 && _diceViewModel.CurrentGameType == (int)Settings.DiceBetTypes.TripleDice)
                                    {
                                        @Bet_Value.Substring(0, 1)
                                        ;
                                    }
                                </span>
                                <span class="btn p-1 mt-1 blue col ml-1 mr-1 diceColorButton dice-width">
                                    @if (Bet_Value != String.Empty && Bet_Value is not null && Bet_Value.Length > 1 && _diceViewModel.CurrentGameType == (int)Settings.DiceBetTypes.TripleDice)
                                    {
                                        @Bet_Value.Substring(1, 1)
                                        ;
                                    }
                                </span>
                                <span class="btn p-1 mt-1 red col diceColorButton dice-width">
                                    @if (Bet_Value != String.Empty && Bet_Value is not null && Bet_Value.Length > 2 && _diceViewModel.CurrentGameType == (int)Settings.DiceBetTypes.TripleDice)
                                    {
                                        @Bet_Value.Substring(2, 1)
                                        ;
                                    }
                                </span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Pop-up Number Properties *@
    <div id="betColorBtnContainer" class="@CSS_SingleColor_NumberBtn_Div container p-0">
        <h6 class="text-center text-white mb-0 pt-1">Select Bet Number</h6>
        <div class="d-flex p-1 mt-1">
            <div class="d-flex col p-0 ">
                <div class="col p-1 d-flex justify-content-center align-items-center">
                    <button type="button" class="diceButton col p-2 @CSS_SingleColor_NumberBtn" @onclick:preventDefault @onclick='(() => SetBetCombination("1"))'>1</button>
                </div>
                <div class="col p-1 d-flex justify-content-center align-items-center">
                    <button type="button" class="diceButton col p-2 @CSS_SingleColor_NumberBtn" @onclick:preventDefault @onclick='(() => SetBetCombination("2"))'>2</button>
                </div>
                <div class="col p-1 d-flex justify-content-center align-items-center">
                    <button type="button" class="diceButton col p-2 @CSS_SingleColor_NumberBtn" @onclick:preventDefault @onclick='(() => SetBetCombination("3"))'>3</button>
                </div>
                <div class="col p-1 d-flex justify-content-center align-items-center">
                    <button type="button" class="diceButton col p-2 @CSS_SingleColor_NumberBtn" @onclick:preventDefault @onclick='(() => SetBetCombination("4"))'>4</button>
                </div>
                <div class="col p-1 d-flex justify-content-center align-items-center">
                    <button type="button" class="diceButton col p-2 @CSS_SingleColor_NumberBtn" @onclick:preventDefault @onclick='(() => SetBetCombination("5"))'>5</button>
                </div>
                <div class="col p-1 d-flex justify-content-center align-items-center">
                    <button type="button" class="diceButton col p-2 @CSS_SingleColor_NumberBtn" @onclick:preventDefault @onclick='(() => SetBetCombination("6"))'>6</button>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter] public EventCallback<MouseEventArgs> OnClickCallback { get; set; }
    [Parameter] public string Single_Dice_Multiplier { get; set; } = "";
    [Parameter] public string Bet_Value { get; set; } = "";
    [Parameter] public string All_Dice_Multiplier { get; set; } = "";
    [Parameter] public string CSS_SingleColor_NumberBtn { get; set; } = "";
    [Parameter] public string CSS_SingleColor_NumberBtn_Div { get; set; } = "";

    public async Task SelectBetType(int BetType)
    {
        _diceViewModel.CSS_SingleColor_NumberBtn_Div = "show";
        _diceViewModel.CurrentGameType = BetType;
        await OnClickCallback.InvokeAsync();

        switch (BetType)
        {
            case (int)Settings.DiceBetTypes.FirstDice:
                _diceViewModel.CSS_SingleColor_NumberBtn = "yellow";
                break;
            case (int)Settings.DiceBetTypes.SecondDice:
                _diceViewModel.CSS_SingleColor_NumberBtn = "blue";
                break;
            case (int)Settings.DiceBetTypes.ThirdDice:
                _diceViewModel.CSS_SingleColor_NumberBtn = "red";
                break;
            case (int)Settings.DiceBetTypes.TripleDice:
                _diceViewModel.CSS_SingleColor_NumberBtn = "yellow";
                break;
        }
    }
    public async Task SetBetCombination(string BetCombi)
    {
        _diceViewModel.IsBetting_Button_Disabled = true;
        

        switch (_diceViewModel.CurrentGameType)
        {
            case (int)Settings.DiceBetTypes.FirstDice:
                _diceViewModel.CSS_SingleColor_NumberBtn_Div = "hide";
                _diceViewModel.BetCombinationValue = Settings.Constants.FirstDice + BetCombi;
                _diceViewModel.GameVariantId = (int)Settings.GameVariant.DiceSingle;
                await _diceViewModel.SetGameChips((int)Settings.GameVariant.DiceSingle, true);
                await _diceViewModel.ShowDivToken();
                break;
            case (int)Settings.DiceBetTypes.SecondDice:
                _diceViewModel.CSS_SingleColor_NumberBtn_Div = "hide";
                _diceViewModel.BetCombinationValue = Settings.Constants.SecondDice + BetCombi;
                _diceViewModel.GameVariantId = (int)Settings.GameVariant.DiceSingle;
                await _diceViewModel.SetGameChips((int)Settings.GameVariant.DiceSingle, true);
                await _diceViewModel.ShowDivToken();
                break;
            case (int)Settings.DiceBetTypes.ThirdDice:
                _diceViewModel.CSS_SingleColor_NumberBtn_Div = "hide";
                _diceViewModel.BetCombinationValue = Settings.Constants.ThirdDice + BetCombi;
                _diceViewModel.GameVariantId = (int)Settings.GameVariant.DiceSingle;
                await _diceViewModel.SetGameChips((int)Settings.GameVariant.DiceSingle, true);
                await _diceViewModel.ShowDivToken();
                break;
            case (int)Settings.DiceBetTypes.TripleDice:
                _diceViewModel.GameVariantId = 0;
                await _diceViewModel.SetGameChips(0, false);
                await _diceViewModel.AddCharacter(BetCombi);
                await OnClickCallback.InvokeAsync();
                break;
        }
    }
}